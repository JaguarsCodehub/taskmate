# Task Management Mobile Application
1. While creating client, ask project
2. Update Tasks, Only title should be shown, With project and client
3. Update Tasks, Filter (priority), color code for priority
4. Mark as Complete needs Task Photo Proof

ExponentPushToken[35lv9SPfB8lzTS6vTMRxO6]


Well I need to send notifications when the 'notification_time' matches the current time. Notification should only be sent to the users referring to the assigned_to id in the 'task_assignments' table
The new code you gave me was :
import * as BackgroundFetch from 'expo-background-fetch';
import * as TaskManager from 'expo-task-manager';
import { supabase } from '@/utils/supabase'; // Adjust the path to your Supabase instance
import { sendPushNotification } from './NotificationProvider'; // Import your sendPushNotification function

const TASK_NAME = 'TASK_NOTIFICATION';

TaskManager.defineTask(TASK_NAME, async () => {
    try {
        console.log('Background task is running');
        const now = new Date().toISOString();

        // Fetch tasks that need notifications
        const { data: tasks, error: tasksError } = await supabase
            .from('task_assignments')
            .select('assigned_to, task_id')
            .lte('notification_time', now);

        if (tasksError) {
            console.error('Error fetching tasks:', tasksError);
            return BackgroundFetch.BackgroundFetchResult.Failed;
        }

        if (tasks && tasks.length > 0) {
            console.log('Tasks to notify:', tasks);

            for (const task of tasks) {
                // Fetch the push token for the user assigned to the task
                const { data: user, error: userError } = await supabase
                    .from('users')
                    .select('push_token')
                    .eq('id', task.assigned_to)
                    .single();

                if (userError) {
                    console.error('Error fetching user push token:', userError);
                    continue; // Skip to the next task if there's an error
                }

                if (user && user.push_token) {
                    await sendPushNotification(user.push_token, task.task_id);
                } else {
                    console.warn(`No push token found for user ${task.assigned_to}`);
                }
            }
        }

        return tasks.length > 0
            ? BackgroundFetch.BackgroundFetchResult.NewData
            : BackgroundFetch.BackgroundFetchResult.NoData;
    } catch (error) {
        console.error('Error in background task:', error);
        return BackgroundFetch.BackgroundFetchResult.Failed;
    }
});

// Register the task with the system
async function registerBackgroundTask() {
    try {
        await BackgroundFetch.registerTaskAsync(TASK_NAME, {
            minimumInterval: 15 * 60, // Run every 15 minutes
            stopOnTerminate: false,
            startOnBoot: true,
        });
        console.log('Task registered successfully');
    } catch (err) {
        console.log('Task Register failed:', err);
    }
}

// Call this function somewhere in your app initialization (e.g., in useEffect of your root component)
registerBackgroundTask();
export async function sendPushNotification(expoPushToken: string, taskId: string) {
    const message = {
        to: expoPushToken,
        sound: 'default',
        title: 'New Task Assigned',
        body: `You have been assigned a new task. Task ID: ${taskId}`,
        data: { taskId }, // You can include other relevant data here
    };

    await fetch('https://exp.host/--/api/v2/push/send', {
        method: 'POST',
        headers: {
            Accept: 'application/json',
            'Accept-encoding': 'gzip, deflate',
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(message),
    });
}


The Previous Code where I want you to integrate the new logic is this:
import { useState, useEffect, useRef } from 'react';
import { Text, View, Button, Platform, Alert } from 'react-native';
import * as Device from 'expo-device';
import * as Notifications from 'expo-notifications';
import * as BackgroundFetch from 'expo-background-fetch';
import * as TaskManager from 'expo-task-manager';
import Constants from 'expo-constants';
import { supabase } from '@/utils/supabase';
import { useAuth } from './AuthProvider';

Notifications.setNotificationHandler({
    handleNotification: async () => ({
        shouldShowAlert: true,
        shouldPlaySound: false,
        shouldSetBadge: false,
    }),
});

function handleRegistrationError(errorMessage: string) {
    alert(errorMessage);
    throw new Error(errorMessage);
}

const TASK_NAME = 'check-task-notifications';

export default function NotificationProvider({ children }: any) {
    const { user } = useAuth();
    const [expoPushToken, setExpoPushToken] = useState('');
    const notificationListener = useRef<Notifications.Subscription>();
    const responseListener = useRef<Notifications.Subscription>();

    useEffect(() => {
        registerForPushNotificationsAsync()
            .then(token => setExpoPushToken(token ?? ''))
            .catch((error: any) => setExpoPushToken(`${error}`));

        notificationListener.current = Notifications.addNotificationReceivedListener(notification => {
            Alert.alert(
                notification.request.content.title || 'Notification',
                notification.request.content.body || 'Notification Body',
            );
        });

        saveUserPushToken();

        registerBackgroundFetchAsync(); // Register background fetch

        return () => {
            notificationListener.current &&
                Notifications.removeNotificationSubscription(notificationListener.current);
        };
    }, [expoPushToken, user]);

    const saveUserPushToken = async () => {
        if (!user?.id || !expoPushToken) {
            Alert.alert("Permission not granted to get push token for push notification!");
            return;
        }

        const { error } = await supabase
            .from('users')
            .upsert({ id: user.id, push_token: expoPushToken }) // include the id field
            .eq('id', user.id);

        if (error) {
            console.log(error.message);
            Alert.alert(error.message);
            return;
        }
        console.log(user.id);
        Alert.alert("Push Token was saved");
    };

    const registerBackgroundFetchAsync = async () => {
        try {
            await BackgroundFetch.registerTaskAsync(TASK_NAME, {
                minimumInterval: 15 * 60, // Check every 15 minutes
                stopOnTerminate: false,   // Don't stop background fetch when the app is terminated
                startOnBoot: true,        // Restart background fetch when the device is rebooted
            });
            console.log('Background fetch registered successfully');
        } catch (err) {
            console.error('Failed to register background fetch:', err);
        }
    };

    return children;
}

TaskManager.defineTask(TASK_NAME, async () => {

    const { user } = useAuth();
    try {
        const now = new Date().toISOString();

        // Fetch tasks where the current time is greater than or equal to the notification_time
        const { data, error } = await supabase
            .from('task_assignments')
            .select('*')
            .eq('assigned_to', user?.id)  // Ensure you use the logged-in user's ID
            .lte('notification_time', now);

        if (error) {
            console.error('Error fetching tasks:', error);
            return BackgroundFetch.BackgroundFetchResult.Failed;
        }

        if (data && data.length > 0) {
            // Send a notification for each task that needs to notify the user
            data.forEach(task => {
                sendPushNotification(task.push_token, task.task_id); // Use the correct push token and task ID
            });
        }

        return data.length > 0
            ? BackgroundFetch.BackgroundFetchResult.NewData
            : BackgroundFetch.BackgroundFetchResult.NoData;
    } catch (error) {
        console.error('Error in background task:', error);
        return BackgroundFetch.BackgroundFetchResult.Failed;
    }
});

async function registerForPushNotificationsAsync() {
    if (Platform.OS === 'android') {
        Notifications.setNotificationChannelAsync('default', {
            name: 'default',
            importance: Notifications.AndroidImportance.MAX,
            vibrationPattern: [0, 500, 500, 500],
            lightColor: '#D6BD98',
        });
    }

    if (Device.isDevice) {
        const { status: existingStatus } = await Notifications.getPermissionsAsync();
        let finalStatus = existingStatus;
        if (existingStatus !== 'granted') {
            const { status } = await Notifications.requestPermissionsAsync();
            finalStatus = status;
        }
        if (finalStatus !== 'granted') {
            handleRegistrationError('Permission not granted to get push token for push notification!');
            return;
        }
        const projectId =
            Constants?.expoConfig?.extra?.eas?.projectId ?? Constants?.easConfig?.projectId;
        if (!projectId) {
            handleRegistrationError('Project ID not found');
        }
        try {
            const pushTokenString = (
                await Notifications.getExpoPushTokenAsync({
                    projectId,
                })
            ).data;
            console.log(pushTokenString);
            Alert.alert('Push Token', pushTokenString);
            return pushTokenString;
        } catch (e: unknown) {
            handleRegistrationError(`Error getting a push token - ${e}`);
        }
    } else {
        handleRegistrationError('Must use physical device for push notifications');
    }
}

async function sendPushNotification(expoPushToken: string, taskId: string) {
    const message = {
        to: expoPushToken,
        sound: 'default',
        title: 'Task Reminder',
        body: `You have a task to complete! Task ID: ${taskId}`,
        data: { someData: 'goes here' },
    };

    await fetch('https://exp.host/--/api/v2/push/send', {
        method: 'POST',
        headers: {
            Accept: 'application/json',
            'Accept-encoding': 'gzip, deflate',
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(message),
    });
}
